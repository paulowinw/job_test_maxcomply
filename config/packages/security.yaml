security:
    # enable_authenticator_manager: true # Remove this line
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # A simple in-memory user provider for this example.
        # In a real app, you would use a database.
        app_user_provider:
            memory:
                users:
                    admin:
                        password: '$2y$13$h1E4/R7B5tM5C32E7d2b2OOg.d.T.C8gY5q.Q5G.J7B.G.H4L1V.H8.' # A hashed password for "password"
                        roles: ['ROLE_ADMIN']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            pattern: ^/api
            stateless: true
            # This is a dummy authenticator. A real-world app would use a
            # proper token authenticator.
            entry_point: App\Security\ApiTokenAuthenticator
            custom_authenticators:
                - App\Security\ApiTokenAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/vehicles/\d+, methods: [PATCH], roles: ROLE_ADMIN }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon