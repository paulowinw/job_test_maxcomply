<?php

namespace App\Tests\Entity;

use App\Entity\Vehicle;
use App\Entity\VehicleMaker;
use PHPUnit\Framework\TestCase;
use Doctrine\Common\Collections\ArrayCollection;

class VehicleMakerTest extends TestCase
{
    /**
     * @var VehicleMaker
     */
    private $vehicleMaker;

    /**
     * This method is called before each test method.
     */
    protected function setUp(): void
    {
        $this->vehicleMaker = new VehicleMaker();
    }

    /**
     * Test the constructor to ensure the vehicles collection is correctly initialized.
     */
    public function testConstructorInitializesVehiclesCollection(): void
    {
        // Assert that the vehicles property is an instance of ArrayCollection
        $this->assertInstanceOf(ArrayCollection::class, $this->vehicleMaker->getVehicles());
        // Assert that the vehicles collection is empty
        $this->assertCount(0, $this->vehicleMaker->getVehicles());
    }

    /**
     * Test the getter for the ID, which should be null initially.
     * The ID is auto-generated by the database, so we don't test setting it.
     */
    public function testGetIdReturnsNullInitially(): void
    {
        $this->assertNull($this->vehicleMaker->getId());
    }

    /**
     * Test the setName and getName methods.
     */
    public function testSetNameAndGetName(): void
    {
        $name = 'Tesla';
        $this->vehicleMaker->setName($name);
        $this->assertSame($name, $this->vehicleMaker->getName());
    }

    /**
     * Test the addVehicle method.
     */
    public function testAddVehicle(): void
    {
        // Create a mock Vehicle object
        $vehicle = $this->createMock(Vehicle::class);

        // Expect the Vehicle's setMaker method to be called once with our VehicleMaker instance
        $vehicle->expects($this->once())
                ->method('setMaker')
                ->with($this->vehicleMaker);

        // Add the vehicle to the maker
        $this->vehicleMaker->addVehicle($vehicle);

        // Assert that the collection now contains one vehicle
        $this->assertCount(1, $this->vehicleMaker->getVehicles());
        // Assert that the added vehicle is in the collection
        $this->assertTrue($this->vehicleMaker->getVehicles()->contains($vehicle));
    }

    /**
     * Test adding the same vehicle multiple times does not add duplicates.
     */
    public function testAddExistingVehicleDoesNotAddDuplicates(): void
    {
        $vehicle = new Vehicle();
        $this->vehicleMaker->addVehicle($vehicle);
        $this->assertCount(1, $this->vehicleMaker->getVehicles());

        // Attempt to add the same vehicle again
        $this->vehicleMaker->addVehicle($vehicle);

        // Assert that the count is still 1
        $this->assertCount(1, $this->vehicleMaker->getVehicles());
    }

    /**
     * Test the removeVehicle method.
     */
    public function testRemoveVehicle(): void
    {
        // Create a mock Vehicle object
        $vehicle = $this->createMock(Vehicle::class);

        // We need to simulate the vehicle being in the collection first
        // and its maker being this vehicle maker.
        // We'll use a new instance to avoid the mock-related issues with the collection.
        $realVehicle = new Vehicle();
        $this->vehicleMaker->addVehicle($realVehicle);

        // We need to set the maker on the vehicle for the condition in removeVehicle to be met.
        $realVehicle->setMaker($this->vehicleMaker);

        // Expect the Vehicle's getMaker method to be called once
        $vehicle->method('getMaker')->willReturn($this->vehicleMaker);
        // Expect the Vehicle's setMaker method to be called once with null
        $vehicle->expects($this->once())
                ->method('setMaker')
                ->with(null);

        // Create a new ArrayCollection to put our mock into for the test
        $vehiclesCollection = new ArrayCollection([$vehicle]);

        // Use reflection to set the private property for testing purposes
        $reflectionProperty = new \ReflectionProperty(VehicleMaker::class, 'vehicles');
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue($this->vehicleMaker, $vehiclesCollection);

        // Assert that the vehicle is in the collection before removal
        $this->assertCount(1, $this->vehicleMaker->getVehicles());
        $this->assertTrue($this->vehicleMaker->getVehicles()->contains($vehicle));

        // Remove the vehicle
        $this->vehicleMaker->removeVehicle($vehicle);

        // Assert that the collection is now empty
        $this->assertCount(0, $this->vehicleMaker->getVehicles());
        // Assert that the vehicle is no longer in the collection
        $this->assertFalse($this->vehicleMaker->getVehicles()->contains($vehicle));
    }
}
